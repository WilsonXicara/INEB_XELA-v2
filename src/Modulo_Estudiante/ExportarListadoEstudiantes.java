/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Estudiante;

import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Wilson Xicará
 */
public class ExportarListadoEstudiantes extends javax.swing.JDialog {
    private Connection conexion;
    private boolean hacerVisible, ciclosCargados;
    private ArrayList<Integer> listaIDCiclos, listaIDGrados;
    private ArrayList<RegInfoListado> listados;
    private int indexListadoMostrado;
    /**
     * Creates new form ExportarListadoEstudiantes
     */
    public ExportarListadoEstudiantes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public ExportarListadoEstudiantes(java.awt.Frame parent, Connection conexion) {
        super(parent, true);
        initComponents();
        this.conexion = conexion;
        ciclosCargados = !(hacerVisible = true);    // Inicialmente se mostrará la ventana, y no se han cargado los Ciclos Escolares
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cCicloEscolar;
            // Obtengo los ID's de los Ciclos Escolares existentes
            cCicloEscolar = sentencia.executeQuery("SELECT Id, Anio FROM CicloEscolar");
            listaIDCiclos = new ArrayList<>();
            while(cCicloEscolar.next()) {   // Cargo al ArrayList y al JComboBox los Ciclos Escolares encontrados en la BD
                listaIDCiclos.add(cCicloEscolar.getInt("Id"));
                ciclo_escolar.addItem(cCicloEscolar.getString("Anio"));
            } ciclo_escolar.addItem("Sin Asignación");
            ciclosCargados = true;  // Hasta aquí se garantiza la carga de todos Ciclos Escolares de la Base de Datos
            // Otras configuraciones importantes
            listaIDGrados = new ArrayList<>();
            ciclo_escolar.setSelectedIndex(-1); // Esta opción es para generar una llamada al itemStateChange en caso de sólo encontrar un ciclo
            ciclo_escolar.setSelectedIndex(ciclo_escolar.getItemCount() - 1);   // Selecciono por defecto la opción de 'Sin Asignación'
            listados = new ArrayList<>();
            tabla_listado.setShowHorizontalLines(true); // Para mostrar los bordes de las celdas de la tabla
            tabla_listado.setShowVerticalLines(true);
            this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla
        } catch (SQLException ex) {
            hacerVisible = false;   // Si ocurriese un error, no se mostrará esta ventana
            JOptionPane.showMessageDialog(this, "Error al intentar obtener registros de la Base de Datos.\n\nDescripción:\n"+ex.getMessage(), "Error en conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ciclo_escolar = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        grado = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ordenar_por_nombres = new javax.swing.JRadioButton();
        ordenar_por_apellidos = new javax.swing.JRadioButton();
        obtener_listado = new javax.swing.JButton();
        panel_info_listados = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        informacion_listado = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_listado = new javax.swing.JTable();
        listado_anterior = new javax.swing.JButton();
        listado_siguiente = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        exportar_listados = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exportar listao de Estudiantes");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Seleccione la fuente del listado:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Ciclo Escolar:");

        ciclo_escolar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ciclo_escolar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciclo_escolarItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Grado:");

        grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Ordenar por:");

        ordenar_por_nombres.setText("Nombres");
        ordenar_por_nombres.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordenar_por_nombresItemStateChanged(evt);
            }
        });

        ordenar_por_apellidos.setSelected(true);
        ordenar_por_apellidos.setText("Apellidos");
        ordenar_por_apellidos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordenar_por_apellidosItemStateChanged(evt);
            }
        });

        obtener_listado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        obtener_listado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/adelante(16x16).png"))); // NOI18N
        obtener_listado.setText("Obtener listado(s)");
        obtener_listado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obtener_listadoActionPerformed(evt);
            }
        });

        panel_info_listados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información de listados encontrados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        panel_info_listados.setPreferredSize(new java.awt.Dimension(425, 450));

        informacion_listado.setEditable(false);
        informacion_listado.setColumns(20);
        informacion_listado.setRows(5);
        informacion_listado.setText("*****     No se ha realizado una búsqueda     *****");
        jScrollPane2.setViewportView(informacion_listado);

        tabla_listado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tabla_listado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " No.", " Nombre completo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_listado.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_listado.setRowHeight(25);
        tabla_listado.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_listado);
        if (tabla_listado.getColumnModel().getColumnCount() > 0) {
            tabla_listado.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla_listado.getColumnModel().getColumn(1).setPreferredWidth(500);
        }

        listado_anterior.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        listado_anterior.setText("Anterior");
        listado_anterior.setEnabled(false);
        listado_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listado_anteriorActionPerformed(evt);
            }
        });

        listado_siguiente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        listado_siguiente.setText("Siguiente");
        listado_siguiente.setEnabled(false);
        listado_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listado_siguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_info_listadosLayout = new javax.swing.GroupLayout(panel_info_listados);
        panel_info_listados.setLayout(panel_info_listadosLayout);
        panel_info_listadosLayout.setHorizontalGroup(
            panel_info_listadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_info_listadosLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(listado_anterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listado_siguiente))
        );
        panel_info_listadosLayout.setVerticalGroup(
            panel_info_listadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_info_listadosLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_info_listadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listado_anterior)
                    .addComponent(listado_siguiente))
                .addGap(0, 0, 0))
        );

        cancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        exportar_listados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exportar_listados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar(16x16).png"))); // NOI18N
        exportar_listados.setText("Exportar listado(s)");
        exportar_listados.setEnabled(false);
        exportar_listados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportar_listadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_info_listados, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(exportar_listados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelar))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ciclo_escolar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(obtener_listado))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ordenar_por_apellidos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ordenar_por_nombres)))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ciclo_escolar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(obtener_listado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ordenar_por_nombres)
                    .addComponent(ordenar_por_apellidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_info_listados, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportar_listados)
                    .addComponent(cancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento que controla la selección de ciclos escolares mostrados. Al seleccionar un Ciclo escolar existente se debe
 actualizar los grados que pertenecen a dicho ciclo. Si se selecciona 'Sin Asignación' se bloquea el JComboBox de nombreGrado.
     * @param evt 
     */
    private void ciclo_escolarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciclo_escolarItemStateChanged
        int indexCiclo = ciclo_escolar.getSelectedIndex();  // Obtengo el item seleccionado
        if (evt.getStateChange()==ItemEvent.SELECTED && ciclosCargados && indexCiclo != -1) {
            grado.removeAllItems(); // Elimino los Grados de la búsqueda anterior
            listaIDGrados.clear();
            if (indexCiclo == (ciclo_escolar.getItemCount()-1)) {   // Se eligió la opción de 'Sin Asignación'
                grado.setEnabled(false);    // No se puede seleccionar un nombreGrado (no existen)
                return;
            }
            // Se eligió un Ciclo Escolar ya creado
            grado.setEnabled(true);
//            listaIDGrados.clear();
            // Obtengo los Grados que pertenecen al Ciclo Escolar seleccionado y los agrego al JComboBox que corresponde
            try {
                ResultSet cGrados = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
                        .executeQuery("SELECT AsignacionCAT.Grado_Id idGrado, Grado.Nombre Grado, Grado.Seccion FROM AsignacionCAT "
                                + "INNER JOIN Grado ON AsignacionCAT.Grado_Id = Grado.Id "
                                + "WHERE AsignacionCAT.CicloEscolar_Id = "+listaIDCiclos.get(indexCiclo)+" "
                                + "GROUP BY AsignacionCAT.Grado_Id");
                while (cGrados.next()) {
                    listaIDGrados.add(cGrados.getInt("idGrado"));
                    grado.addItem(cGrados.getString("Grado")+" "+cGrados.getString("Seccion"));
                } grado.addItem("Todos los grados");  // Opción que permitirá buscar a los estudiantes de todos los grados
                int cantidad = grado.getItemCount();
                grado.setSelectedIndex((cantidad == 0) ? -1 : 0);
                // Hasta aquí se garantiza la carga de todos los grados
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al intentar obtener los grados:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ciclo_escolarItemStateChanged

    private void ordenar_por_apellidosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ordenar_por_apellidosItemStateChanged
        ordenar_por_nombres.setSelected(!ordenar_por_apellidos.isSelected());
    }//GEN-LAST:event_ordenar_por_apellidosItemStateChanged

    private void ordenar_por_nombresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ordenar_por_nombresItemStateChanged
        ordenar_por_apellidos.setSelected(!ordenar_por_nombres.isSelected());
    }//GEN-LAST:event_ordenar_por_nombresItemStateChanged
    /**
     * Acción que permite extraer los listados de Estudiantes, que concuerden con las especificaciones, desde la Base de
     * Datos. Dependiendo de las especificaciones, se puede obtener más de un listado por lo que dichos listados se cargan
     * a un ArrayList<RegInfoListado>.
     * @param evt 
     */
    private void obtener_listadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obtener_listadoActionPerformed
        listado_anterior.setEnabled(false); // Inhabilito los botones de desplazamiento entre listados
        listado_siguiente.setEnabled(false);
        listados.clear();   // Eliminación de todos los registros de la búsqueda anterior
        if ("Nueva búsqueda".equals(obtener_listado.getText())) {
            obtener_listado.setText("Obtener listado(s)");
            obtener_listado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/adelante(16x16).png")));
            ciclo_escolar.setEnabled(true);
            int index = ciclo_escolar.getSelectedIndex();
            ciclo_escolar.setSelectedIndex(-1);
            ciclo_escolar.setSelectedIndex(index);
            ordenar_por_apellidos.setEnabled(true);
            ordenar_por_nombres.setEnabled(true);
            exportar_listados.setEnabled(false);
            return;
        }
        obtener_listado.setText("Nueva búsqueda");
        obtener_listado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar(16x16).png")));
        ciclo_escolar.setEnabled(false);
        grado.setEnabled(false);
        ordenar_por_apellidos.setEnabled(false);
        ordenar_por_nombres.setEnabled(false);
        
        int cicloSelec = ciclo_escolar.getSelectedIndex(), gradoSelec = grado.getSelectedIndex();
        String ordenarPor = ordenar_por_apellidos.isSelected() ? "Apellidos" : "Nombres";
        // Se tiene la opción de obtener todos los listados de un Ciclo Escolar seleccionado, por lo que se requiere varias
        // consultas a la Base de Datos (en este caso).
        ArrayList<String> listaInstrucciones = new ArrayList<>();
        if (cicloSelec == (ciclo_escolar.getItemCount()-1)) {    // Si se ha seleccionado la opción de 'Sin Asignación'
            String instruccion = "SELECT CONCAT("+("Apellidos".equals(ordenarPor) ? "Apellidos, ', ', Nombres" : "Nombres, ' ', Apellidos")+") FROM Estudiante "
                    + "LEFT JOIN AsignacionEST ON Estudiante.Id = AsignacionEST.Estudiante_Id "
                    + "WHERE AsignacionEst.Id IS NULL "
                    + "ORDER BY "+ordenarPor;
            listaInstrucciones.add(instruccion);
        }   // Hasta aquí ya se generó la instrucción para obtener el listado de Estudiantes Sin Asignación
        else {  // Si se ha seleccionado uno de los Ciclos escolares existentes
            if (gradoSelec == (grado.getItemCount()-1)) {   // Si se ha seleccionado la opción de 'Todos los grados'
                int contGrados = listaIDGrados.size();
                for(int i=0; i<contGrados; i++) {
                    String instruccion = "SELECT CONCAT("+("Apellidos".equals(ordenarPor) ? "Apellidos, ', ', Nombres" : "Nombres, ' ', Apellidos")+") FROM CicloEscolar "
                            + "INNER JOIN AsignacionEST ON CicloEscolar.Id = AsignacionEST.CicloEscolar_Id "
                            + "INNER JOIN Grado ON AsignacionEST.Grado_Id = Grado.Id "
                            + "INNER JOIN Estudiante ON AsignacionEST.Estudiante_Id = Estudiante.Id "
                            + "WHERE CicloEscolar.Id = "+listaIDCiclos.get(cicloSelec)+" AND Grado_Id = "+listaIDGrados.get(i)+" "
                            + "ORDER BY "+ordenarPor;
                    listaInstrucciones.add(instruccion);
                }
            } else {    // Si se quiere obtener el listado de un Grado en específico
                String instruccion = "SELECT CONCAT("+("Apellidos".equals(ordenarPor) ? "Apellidos, ', ', Nombres" : "Nombres, ' ', Apellidos")+") FROM CicloEscolar "
                        + "INNER JOIN AsignacionEST ON CicloEscolar.Id = AsignacionEST.CicloEscolar_Id "
                        + "INNER JOIN Grado ON AsignacionEST.Grado_Id = Grado.Id "
                        + "INNER JOIN Estudiante ON AsignacionEST.Estudiante_Id = Estudiante.Id "
                        + "WHERE CicloEscolar.Id = "+listaIDCiclos.get(cicloSelec)+" AND Grado_Id = "+listaIDGrados.get(gradoSelec)+" "
                        + "ORDER BY "+ordenarPor;
                    listaInstrucciones.add(instruccion);
            }   // Hasta aquí ya se generó la(s) instruccion(es) para obtener todos los listados de Estudiantes de un Ciclo Escolar específico
        }
        // Obtención de los listados desde la Base de datos:
        int cantidad = listaInstrucciones.size();
        for(int cont=0; cont<cantidad; cont++) {
            try {   // Obtención del cont-ésimo listado
                Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet cListado = sentencia.executeQuery(listaInstrucciones.get(cont));
                ArrayList<String> listado = new ArrayList<>();
                while (cListado.next())
                    listado.add(cListado.getString(1));
                listados.add(new RegInfoListado(ordenarPor,
                        ciclo_escolar.getSelectedItem().toString(),
                        grado.getSelectedIndex()==-1 ? "Sin Asignación" : grado.getItemAt(cont),
                        listado));
            } catch (SQLException ex) {
                Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }   // Hasta aquí se garantiza la obtención de todos los listados requeridos
        exportar_listados.setEnabled(!listados.isEmpty());  // Se puede exportar siempre que haya por lo menos un listado
        if (cantidad > 0) {
            listado_siguiente.setEnabled(cantidad > 1);
            // Ahora se mostrará la información del primer listado de los obtenidos
            indexListadoMostrado = 0;
            mostrar_datos_listado();
        }

    }//GEN-LAST:event_obtener_listadoActionPerformed

    private void listado_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listado_anteriorActionPerformed
        // Si este botón está habilitado, es porque indexListadoMostrado > 0
        if (indexListadoMostrado > 0) {
            indexListadoMostrado--;
            if (indexListadoMostrado == 0)
                listado_anterior.setEnabled(false);
            listado_siguiente.setEnabled(true); // Siempre se pueda ir al anterior, se tendrá un siguiente
            mostrar_datos_listado();
        }
    }//GEN-LAST:event_listado_anteriorActionPerformed

    private void listado_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listado_siguienteActionPerformed
        // Si este botón está habilidado, es porque indexListadoMostrado < listados.size()
        if (indexListadoMostrado < (listados.size()-1)) {
            indexListadoMostrado++;
            if (indexListadoMostrado == (listados.size()-1))
                listado_siguiente.setEnabled(false);
            listado_anterior.setEnabled(true);  // Siempre que se pueda ir al siguiente, se tendrá un anterior
            mostrar_datos_listado();
        }
    }//GEN-LAST:event_listado_siguienteActionPerformed
    /**
     * Acción que permite exportar los listados a un archivo de Excel. Para el caso en que s exportan varios listados, se
     * agrega un listado a una Hoja del Libro de Excel. El usuario debe ingresar el nombre del archivo final.
     * @param evt 
     */
    private void exportar_listadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportar_listadosActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("Archivos de Excel (*.xls)","xls"));
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        int opcion = chooser.showSaveDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {    // Ya se asignó un nombre y ruta al archivo. Procedo a la Exportación
            String nombreArchivo = chooser.getSelectedFile().toString(); 
            try {
                WritableWorkbook libroExcel = Workbook.createWorkbook(new File(nombreArchivo+".xls"));
                int contListados = listados.size();
                RegInfoListado iterador;
                for(int numeroHoja=0; numeroHoja<contListados; numeroHoja++) {    // Exportación del cont-ésimo listado a una Hoja del Libro de Excel
                    iterador = listados.get(numeroHoja);
                    WritableSheet hojaExcel = libroExcel.createSheet(iterador.getNombreGrado()+"_"+iterador.getNombreCiclo(), numeroHoja);
                    ArrayList<String> listado = iterador.getListadoEstudiantes();
                    // Inicio la escritura de la información de encabezado en el archivo de Excel (sin el título de las columnas)
                    hojaExcel.addCell(new Label(0, 0, "Listado de Estudiantes"));
                    hojaExcel.addCell(new Label(0, 1, "Ciclo Escolar:"));
                    hojaExcel.addCell(new Label(1, 1, iterador.getNombreCiclo()));
                    hojaExcel.addCell(new Label(0, 2, "Grado:"));
                    hojaExcel.addCell(new Label(1, 2, iterador.getNombreGrado()));
                    hojaExcel.addCell(new Label(0, 4, "Estudiantes (ordenado por "+iterador.getOrdenadoPor()+")"));
                    hojaExcel.addCell(new Label(0, 5, "No."));
                    hojaExcel.addCell(new Label(1, 5, "Nombre completo"));
                    // Procedo a escribir los Nombres del listado en la Hoja del archivo de Excel
                    int contFil = listado.size();
                    for(int cont=0; cont<contFil; cont++) {
                        hojaExcel.addCell(new Label(0, 6+cont, ""+(cont+1)));
                        hojaExcel.addCell(new Label(1, 6+cont, listado.get(cont)));
                    }
                }   // Hasta aquí se garantiza la exportación de todos los listados
                libroExcel.write();
                libroExcel.close();
                JOptionPane.showMessageDialog(this, "Datos exportados con éxito", "Exportar listado", JOptionPane.INFORMATION_MESSAGE);
             } catch (IOException | WriteException ex) {
                 JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar crear el archivo.\n\nDescripción:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                 Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
    }//GEN-LAST:event_exportar_listadosActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelarActionPerformed

    private void mostrar_datos_listado() {
        DefaultTableModel modelListado = (DefaultTableModel)tabla_listado.getModel();
        modelListado.setRowCount(0);
        if (indexListadoMostrado == -1) {   // Se limpiarán los campos
            informacion_listado.setText("*****     No se encontró algún listado     *****");
        } else {    // Se mostrará la información de un listado en específico
            RegInfoListado listado = listados.get(indexListadoMostrado);
            ArrayList<String> listaEstudiantes = listado.getListadoEstudiantes();
            int cantidad = listaEstudiantes.size();
            informacion_listado.setText("*****     Listado "+(indexListadoMostrado+1)+" de "+listados.size()+"     *****"
                    + "\nOrdenado por:\t"+listado.getOrdenadoPor()+""
                    + "\nCiclo Escolar:\t"+listado.getNombreCiclo()
                    + "\nGrado:\t"+listado.getNombreGrado());
            for(int i=0; i<cantidad; i++)
                modelListado.addRow(new String[]{""+(i+1), listaEstudiantes.get(i)});
        }
    }
    public boolean getHacerVisible() { return hacerVisible; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportarListadoEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExportarListadoEstudiantes dialog = new ExportarListadoEstudiantes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private class RegInfoListado {
        private String ordenadoPor, nombreCiclo, nombreGrado;
        private ArrayList<String> listadoEstudiantes;
        private RegInfoListado() {
            ordenadoPor = nombreCiclo = nombreGrado = "";
            listadoEstudiantes = new ArrayList<>();
        }
        public RegInfoListado(String ordenadoPor, String nombreCiclo, String nombreGrado, ArrayList<String> listadoEstudiantes) {
            this.ordenadoPor = ordenadoPor;
            this.nombreCiclo = nombreCiclo;
            this.nombreGrado = nombreGrado;
            this.listadoEstudiantes = listadoEstudiantes;
        }

        public void setOrdenadoPor(String ordenadoPor) { this.ordenadoPor = ordenadoPor; }
        public void setNombreCiclo(String nombreCiclo) { this.nombreCiclo = nombreCiclo; }
        public void setNombreGrado(String nombreGrado) { this.nombreGrado = nombreGrado; }
        public void setListadoEstudiantes(ArrayList<String> listadoEstudiantes) { this.listadoEstudiantes = listadoEstudiantes; }

        public String getOrdenadoPor() { return ordenadoPor; }
        public String getNombreCiclo() { return nombreCiclo; }
        public String getNombreGrado() { return nombreGrado; }
        public ArrayList<String> getListadoEstudiantes() { return listadoEstudiantes; }
        public int getCantidadEstudiantes() { return listadoEstudiantes.size();}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> ciclo_escolar;
    private javax.swing.JButton exportar_listados;
    private javax.swing.JComboBox<String> grado;
    private javax.swing.JTextArea informacion_listado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listado_anterior;
    private javax.swing.JButton listado_siguiente;
    private javax.swing.JButton obtener_listado;
    private javax.swing.JRadioButton ordenar_por_apellidos;
    private javax.swing.JRadioButton ordenar_por_nombres;
    private javax.swing.JPanel panel_info_listados;
    private javax.swing.JTable tabla_listado;
    // End of variables declaration//GEN-END:variables
}
