/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Conexion;

import Modulo_Estudiante.ExcepcionDatosIncorrectos;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Wilson Xicará
 */
public class ConectarBD extends javax.swing.JDialog {
    private Connection conexion;
    private static String rutaArchivo;
    public static final String SEPARADOR = System.getProperty("file.separator");
    public static final String CARPETA_PRINCIPAL = System.getProperty("user.home") + SEPARADOR + "BD";
    private boolean hacerVisible;
    private String direccionIPServidor;
    /**
     * Creates new form ConectarBD2
     */
    public ConectarBD(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rutaArchivo = CARPETA_PRINCIPAL + SEPARADOR + "datos.sbd";
        
        hacerVisible = true;
        intentar_conexion();
        this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla.
    }
    
    private void intentar_conexion() {
        File carpetaPrincipal = new File(CARPETA_PRINCIPAL);
        File archivoPrincipal = new File(rutaArchivo);
        String firma = "", nombreBD = "", usuario = "", contrasenia = "";
        // SI NO SE ENCUENTRA EL ARCHIVO, SE PEDIRÁN LOS DATOS
        if (!carpetaPrincipal.exists() || !archivoPrincipal.exists()) {
            carpetaPrincipal.mkdirs();
            return;
        }
        try {
            RandomAccessFile archivo = new RandomAccessFile(rutaArchivo, "r");
            firma = archivo.readLine();
            if ("SBDdat".equals(firma)) {   // Es el archivo correcto. Inicio la extracción de datos
                direccionIPServidor = archivo.readLine();
                nombreBD = archivo.readLine();
                usuario = archivo.readLine();
                contrasenia = archivo.readLine();
            }
            archivo.close();
            Class.forName("org.gjt.mm.mysql.Driver");
            conexion = DriverManager.getConnection("jdbc:mysql://" + direccionIPServidor + "/" + nombreBD, usuario, contrasenia);
            hacerVisible = false;   // Si se logra la conexión, no es necesario mostrar este JDialog
        } catch (FileNotFoundException ex) {
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ip_servidor = new javax.swing.JTextField();
        nombre_bd = new javax.swing.JTextField();
        usuario_nombre = new javax.swing.JTextField();
        usuario_contrasenia = new javax.swing.JPasswordField();
        conectar_con_bd = new javax.swing.JButton();
        check_equipo_es_servidor = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conexión con el Servidor");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONEXIÓN CON EL SERVIDOR");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Dirección IP del Servidor:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Nombre de la Base de Datos:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Usuario:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Contraseña:");

        ip_servidor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        nombre_bd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        usuario_nombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        usuario_contrasenia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        conectar_con_bd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        conectar_con_bd.setText("CONECTAR");
        conectar_con_bd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectar_con_bdActionPerformed(evt);
            }
        });

        check_equipo_es_servidor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        check_equipo_es_servidor.setText("Este equipo es el servidor");
        check_equipo_es_servidor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                check_equipo_es_servidorItemStateChanged(evt);
            }
        });

        jLabel6.setText("<html><b>Nota:</b><p>El Usuario debe ser el que tiene acceso a la Base de Datos</p></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ip_servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(check_equipo_es_servidor))
                                    .addComponent(nombre_bd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(usuario_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(usuario_contrasenia)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(conectar_con_bd)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ip_servidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_equipo_es_servidor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nombre_bd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(usuario_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(usuario_contrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(conectar_con_bd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void check_equipo_es_servidorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_check_equipo_es_servidorItemStateChanged
        ip_servidor.setEnabled(!check_equipo_es_servidor.isSelected());
    }//GEN-LAST:event_check_equipo_es_servidorItemStateChanged

    private void conectar_con_bdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectar_con_bdActionPerformed
        try {
            validar_datos();
            direccionIPServidor = (check_equipo_es_servidor.isSelected()) ? "localhost" : ip_servidor.getText();
            String nombreBD = nombre_bd.getText(),
                    usuario = usuario_nombre.getText(),
                    contrasenia = String.valueOf(usuario_contrasenia.getPassword());
            Class.forName("org.gjt.mm.mysql.Driver");
            conexion = DriverManager.getConnection("jdbc:mysql://" + direccionIPServidor + "/" + nombreBD, usuario, contrasenia);
            // Guardado de la información de la conexión realizada.
            String mensajeError = "";
            try {
                RandomAccessFile archivo = new RandomAccessFile(rutaArchivo, "rw");
                archivo.setLength(0);   // El archivo puede que esté dañado, por eso borro todo
                archivo.writeBytes("SBDdat"+'\n');
                archivo.writeBytes(direccionIPServidor+'\n');
                archivo.writeBytes(nombreBD+'\n');
                archivo.writeBytes(usuario+'\n');
                archivo.writeBytes(contrasenia);
                archivo.close();
            } catch (FileNotFoundException ex) {
                mensajeError+= "\n\nAVISO:\nNo se pudo guardar los datos de la configuración actual.\nDebe proporcionarlos la próxima vez que inicie la aplicación";
//                Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                mensajeError+= "\n\nAVISO:\nNo se pudo guardar los datos de la configuración actual.\nDebe proporcionarlos la próxima vez que inicie la aplicación";
//                Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "Conexión establecida!"+mensajeError, "Información", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "No se puede establecer conexión.\nUno de los datos es incorrecto.", "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(ConectarBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_conectar_con_bdActionPerformed

    private void validar_datos() throws ExcepcionDatosIncorrectos {
        if (!check_equipo_es_servidor.isSelected()) {   // El usuario ingresa la dirección IP
            String ipServidor = ip_servidor.getText();
            if (ipServidor.length() == 0)
                throw new ExcepcionDatosIncorrectos("Especifique la Dirección IP del Servidor");
            if (!Pattern.compile("\\d{1,3}(\\.\\d{1,3}){3}").matcher(String.valueOf(ipServidor)).matches())
                throw new ExcepcionDatosIncorrectos("Dirección IP no válida");  // El formato es cuatro grupos de números, separados por punto
            String[] auxIPServidor = ipServidor.split("\\.");
            for(int i=0; i<3; i++)
                if (Integer.parseInt(auxIPServidor[i]) > 255)
                    throw new ExcepcionDatosIncorrectos("La Dirección IP '"+ipServidor+"' tiene valores fuera del rango válido");
        }
        if (nombre_bd.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique el Nombre de la Base de Datos");
        if (usuario_nombre.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique el Nombre de Usuario");
    }
    public boolean getHacerVisible() { return hacerVisible; }
    public Connection getConexion() { return conexion; }
    public String getDireccionIPServidor() { return direccionIPServidor; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConectarBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConectarBD dialog = new ConectarBD(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox check_equipo_es_servidor;
    private javax.swing.JButton conectar_con_bd;
    private javax.swing.JTextField ip_servidor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nombre_bd;
    private javax.swing.JPasswordField usuario_contrasenia;
    private javax.swing.JTextField usuario_nombre;
    // End of variables declaration//GEN-END:variables
}
