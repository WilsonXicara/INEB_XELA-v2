/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Ciclo_Escolar;

import Tipos_tablas.No_editable;
import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USUARIO y Wilson Xicará
 */
public class Ciclo_Escolar extends javax.swing.JDialog {

    Connection base;
    boolean CicloListo = false;
    boolean CicloCerrado = false;
    //Contienen informacion del ciclo actual
    ArrayList<String>  ID ;
    //Contienen informacion de los grados asociados al ciclo dentro de la base
    ArrayList<String> Id_grado,Nombre_grado;
    
    //Contienen informacion de los cursos asociados al ciclo dentro de la base
    ArrayList<String> Id_curso,Nombre_curso;
    
    //Contiene la informacion de los grados que se deasean agregar a la base
    ArrayList<String> nombre_grados_agregados;
    ArrayList<String> grados_agregados;
    ArrayList<String> seccion_agregados;
    //Contiene la informacion de los grados que se desean eliminar de la base
    ArrayList<String> Id_grados_borrados;
    ArrayList<String> nombre_grados_borrados ;
    
    
    //Contiene la informacion de los cursos que se desean agregar a la base
     ArrayList<String> cursos_agregados;
    //Contiene la informacion de los cursos que se desas eliminar a la base
      ArrayList<String> id_cursos_borrados;
      ArrayList<String> nombre_cursos_borrados;
    
    String año;
    
    //punteros para los arraylist
    int posicion,pos_cursos,pos_grados;
    
    
    private boolean cicloCambiado;
    
    /**
     * Creates new form Ciclo_Escolar
     */
    public Ciclo_Escolar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    //Constructor inicial
    public Ciclo_Escolar(java.awt.Frame parent, boolean modal,Connection base) throws SQLException {
        super(parent, modal);
        initComponents();
        limpiar_listas(); 
        this.base = base;
        posicion =0;
        pos_cursos = -1;
        pos_grados = -1;
        Calendar fecha = new GregorianCalendar();
        año = Integer.toString(fecha.get(Calendar.YEAR));
        Cargar_Datos();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        ciclo = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Cursos = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        Tx_Nombre_curso = new javax.swing.JTextField();
        agregar_curso = new javax.swing.JButton();
        eliminar_curso = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Tx_Nombre_grado = new javax.swing.JTextField();
        Tx_seccion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Grados = new javax.swing.JTable();
        agregar_grado = new javax.swing.JButton();
        eliminar_grado = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Cursos_asignados = new javax.swing.JTable();
        asignaciones = new javax.swing.JButton();
        guardar_cambios = new javax.swing.JButton();
        importar_datos = new javax.swing.JButton();
        ciclo_listo = new javax.swing.JRadioButton();
        ciclo_cerrado = new javax.swing.JRadioButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        Menu_crear = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ciclo Escolar");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Ciclo Escolar");

        ciclo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ciclo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cicloItemStateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "No hay Cursos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jScrollPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane4MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jScrollPane4MouseExited(evt);
            }
        });

        Cursos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Cursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Cursos.setRowHeight(20);
        Cursos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Cursos.getTableHeader().setReorderingAllowed(false);
        Cursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CursosMousePressed(evt);
            }
        });
        Cursos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CursosKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(Cursos);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nombre: ");

        Tx_Nombre_curso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        agregar_curso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        agregar_curso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/adelante(16x16).png"))); // NOI18N
        agregar_curso.setText("Agregar");
        agregar_curso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_cursoActionPerformed(evt);
            }
        });

        eliminar_curso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eliminar_curso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar(16x16).png"))); // NOI18N
        eliminar_curso.setText("Eliminar curso");
        eliminar_curso.setEnabled(false);
        eliminar_curso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_cursoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Agregar nuevo Curso");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tx_Nombre_curso, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(eliminar_curso))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(agregar_curso)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminar_curso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tx_Nombre_curso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregar_curso))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "No hay Grados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Sección:");
        jLabel2.setToolTipText("");

        Tx_Nombre_grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Tx_seccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Grado:");

        Grados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Grados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Grados.setRowHeight(20);
        Grados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Grados.getTableHeader().setReorderingAllowed(false);
        Grados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GradosMousePressed(evt);
            }
        });
        Grados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GradosKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(Grados);

        agregar_grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        agregar_grado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/adelante(16x16).png"))); // NOI18N
        agregar_grado.setText("Agregar");
        agregar_grado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_gradoActionPerformed(evt);
            }
        });

        eliminar_grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eliminar_grado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar(16x16).png"))); // NOI18N
        eliminar_grado.setText("Eliminar grado");
        eliminar_grado.setEnabled(false);
        eliminar_grado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_gradoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Agregar nuevo Grado");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tx_seccion, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tx_Nombre_grado, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(agregar_grado)))
                .addGap(0, 104, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(eliminar_grado))
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminar_grado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Tx_Nombre_grado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Tx_seccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregar_grado))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "No hay Cursos Asignados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Cursos_asignados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Cursos_asignados.setRowHeight(20);
        Cursos_asignados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Cursos_asignados);

        asignaciones.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        asignaciones.setText("Asignaciones");
        asignaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignacionesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addComponent(asignaciones)
                .addGap(102, 102, 102))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(asignaciones))
        );

        guardar_cambios.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        guardar_cambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar(32x32).png"))); // NOI18N
        guardar_cambios.setText("Guardar Cambios");
        guardar_cambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_cambiosActionPerformed(evt);
            }
        });

        importar_datos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        importar_datos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/bajar(16x16).png"))); // NOI18N
        importar_datos.setText("Importar Datos");
        importar_datos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importar_datosActionPerformed(evt);
            }
        });

        ciclo_listo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ciclo_listo.setText("Ciclo Listo");
        ciclo_listo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciclo_listoItemStateChanged(evt);
            }
        });

        ciclo_cerrado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ciclo_cerrado.setText("Cerrar Ciclo");
        ciclo_cerrado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciclo_cerradoItemStateChanged(evt);
            }
        });

        Menu_crear.setText("Crear");

        jMenuItem1.setText("Ciclo Escolar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Menu_crear.add(jMenuItem1);

        jMenuBar2.add(Menu_crear);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(ciclo_listo)
                        .addGap(3, 3, 3)
                        .addComponent(ciclo_cerrado)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(importar_datos)
                        .addGap(18, 18, 18)
                        .addComponent(guardar_cambios))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciclo_listo)
                    .addComponent(ciclo_cerrado)
                    .addComponent(guardar_cambios)
                    .addComponent(importar_datos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cicloItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cicloItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            //Se verifica si hubo algun CicloListo
            if(cursos_agregados.size() > 0 || grados_agregados.size() > 0 || id_cursos_borrados.size() > 0 || nombre_grados_borrados.size() > 0){
                String[] opciones = new String[2];
                opciones[0] = "SI";
                opciones[1] = "NO";
                //Pregunto si desea guardar los cambios hechos
                int eleccion = JOptionPane.showOptionDialog(null, "Desea guardar los cambios realizados", "Cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
                if(eleccion == JOptionPane.YES_OPTION) {
                    Guardar_cambios_grados();
                    Guardar_cambios_cursos();
                    limpiar_listas();
                }
                else{
                    limpiar_listas();
                }
            }
             posicion = ciclo.getSelectedIndex();
             Datos_Ciclo();
            // ver
            String cicloSelec = ciclo.getSelectedItem().toString();
            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cursos del Ciclo Escolar "+cicloSelec, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)));
            jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grados del Ciclo Escolar "+cicloSelec, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)));
            jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cursos Asignados al Ciclo Escolar "+cicloSelec, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)));
        }
    }//GEN-LAST:event_cicloItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            new CrearCicloEscolar(new Frame(), base).setVisible(true);
            this.setVisible(true);
            Cargar_Datos();
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void agregar_cursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_cursoActionPerformed
        String[] curso = new String[2];
        curso[0] = Integer.toString(Cursos.getRowCount() + 1);
        curso[1] = Tx_Nombre_curso.getText().trim();
        //Se verifica que haya escrito algo
        if (curso[1].length() > 0) {
            //Se verifica si el cursos a agregar se encuentra en la base
            if(!Nombre_curso.contains(curso[1])){
                //Si no esta en la base, se verifica que no este en cola para ser agregado
                if(!cursos_agregados.contains(curso[1])){
                DefaultTableModel aux = (DefaultTableModel) Cursos.getModel();
                aux.addRow(curso);
                cursos_agregados.add(curso[1]);                    
                }else{
                    JOptionPane.showMessageDialog(this, "El curso ya ha sido agregado", "ERROR", JOptionPane.ERROR_MESSAGE, null);
                }
            }else{
                //Si esta en la base, se verifica si esta en cola para ser borrado
                 if(nombre_cursos_borrados.contains(curso[1])){
                     DefaultTableModel aux = (DefaultTableModel) Cursos.getModel();
                     aux.addRow(curso);
                     id_cursos_borrados.remove(nombre_cursos_borrados.indexOf(curso[1]));
                     nombre_cursos_borrados.remove(curso[1]);
                 }else{
                     JOptionPane.showMessageDialog(this, "El curso ya ha sido agregado", "ERROR", JOptionPane.ERROR_MESSAGE, null);
                 }
            }    
        }
        else{
            JOptionPane.showMessageDialog(this, "Debe escribir algo en la caja Nombre", "ERROR", JOptionPane.ERROR_MESSAGE, null);
        }
         Tx_Nombre_curso.setText("");
    }//GEN-LAST:event_agregar_cursoActionPerformed

    private void agregar_gradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_gradoActionPerformed
        String[] fila = new String[3];
        fila[0] = Integer.toString(Grados.getRowCount()+1);
        fila[1] = Tx_Nombre_grado.getText().trim();
        fila[2] = Tx_seccion.getText().trim();
        if(fila[1].length()>0 && fila[2].length()>0){
            //Se verifica si el grado esta agregado en la base
            if(!Nombre_grado.contains(fila[1]+" "+fila[2])){
                //Si no esta en la base, se verifica que no este en cola para ser agregado
                if(!nombre_grados_agregados.contains(fila[1]+" "+fila[2])){
                    DefaultTableModel aux = (DefaultTableModel) Grados.getModel();
                    aux.addRow(fila);
                    nombre_grados_agregados.add(fila[1]+" "+fila[2]);
                    grados_agregados.add(fila[1]);
                    seccion_agregados.add(fila[2]);
                }else{
                    JOptionPane.showMessageDialog(this, "El grado ya a sido agregado", "ERROR", JOptionPane.ERROR_MESSAGE, null);
                }
            }else{
                //Si esta en la base, se verifica si esta en cola para ser borrado
                if(nombre_grados_borrados.contains(fila[1]+" "+fila[2])){
                    DefaultTableModel aux = (DefaultTableModel) Grados.getModel();
                    aux.addRow(fila);
                    int pos = nombre_grados_borrados.indexOf(fila[1]+" "+fila[2]);
                    nombre_grados_borrados.remove(pos);
                    Id_grados_borrados.remove(pos);  
                }else{
                       JOptionPane.showMessageDialog(this, "El grado ya a sido agregado", "ERROR", JOptionPane.ERROR_MESSAGE, null);
                }
            }     
        }else{
            JOptionPane.showMessageDialog(this, "Debe llenar todas las casillas", "ERROR", JOptionPane.ERROR_MESSAGE, null);
        }
        Tx_Nombre_grado.setText("");
        Tx_seccion.setText("");
    }//GEN-LAST:event_agregar_gradoActionPerformed

    private void guardar_cambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_cambiosActionPerformed
        if(cursos_agregados.size() > 0 || grados_agregados.size() > 0 || id_cursos_borrados.size() > 0 || nombre_grados_borrados.size() > 0){
            String[] opciones = new String[2];
            opciones[0] = "SI";
            opciones[1] = "NO";
            //Pregunto si desea guardar los cambios hechos
            int eleccion = JOptionPane.showOptionDialog(null, "Desea guardar los cambios realizados", "Cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION) {
                Guardar_cambios_grados();
                Guardar_cambios_cursos();
                limpiar_listas();
                Datos_Ciclo();                
            }
        }
    }//GEN-LAST:event_guardar_cambiosActionPerformed

    private void eliminar_cursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_cursoActionPerformed
        // La tabla tiene la propiedad de seleccionar una fila a la vez. Este botón se activa siempre que se selecciona un registro
        int cursoSelec = Cursos.getSelectedRow();
        eliminar_curso_seleccionado(cursoSelec);
    }//GEN-LAST:event_eliminar_cursoActionPerformed

    private void eliminar_gradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_gradoActionPerformed
        // La tabla tiene la propiedad de seleccionar una fila a la vez. Este botón se activa siempre que se selecciona un registro
        int gradoSelec = Grados.getSelectedRow();
        eliminar_grado_seleccionado(gradoSelec);
    }//GEN-LAST:event_eliminar_gradoActionPerformed

    private void importar_datosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importar_datosActionPerformed
        if (ID.size() < 2) {    // Si no hay un ciclo escolar del que se puedan copiar datos
            JOptionPane.showMessageDialog(this, "Actualmente no existe algún ciclo escolar del que se puedan copiar datos", "Datos faltantes", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(cursos_agregados.size() > 0 || grados_agregados.size() > 0 || id_cursos_borrados.size() > 0 || nombre_grados_borrados.size() > 0){
            String[] opciones = new String[2];
            opciones[0] = "SI";
            opciones[1] = "NO";
            //Pregunto si desea guardar los cambios hechos
            int eleccion = JOptionPane.showOptionDialog(null, "Desea guardar los cambios realizados", "Cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION) {
                Guardar_cambios_grados();
                Guardar_cambios_cursos();
                limpiar_listas();
            }
            else{
                limpiar_listas();
            }
        }
        new Importar_datos(new Frame(), true, base, ID.get(posicion)).show();
        Datos_Ciclo();       
    }//GEN-LAST:event_importar_datosActionPerformed

    private void asignacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignacionesActionPerformed
        if(cursos_agregados.size() > 0 || grados_agregados.size() > 0 || id_cursos_borrados.size() > 0 || nombre_grados_borrados.size() > 0){
            String[] opciones = new String[2];
            opciones[0] = "SI";
            opciones[1] = "NO";
            //Pregunto si desea guardar los cambios hecho
            int eleccion = JOptionPane.showOptionDialog(null, "Desea guardar los cambios realizados", "Cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION) {
                Guardar_cambios_grados();
                Guardar_cambios_cursos();
                limpiar_listas();
            }
            else{
                limpiar_listas();
            }
        }
        try {
                new Asignar_curso_a_grado(new Frame(), true, base, ID.get(posicion), ciclo.getSelectedItem().toString()).show();
            } catch (SQLException ex) {
                Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
            }
        Datos_Ciclo();
    }//GEN-LAST:event_asignacionesActionPerformed

    private void ciclo_listoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciclo_listoItemStateChanged
        if(cicloCambiado && evt.getStateChange() == ItemEvent.SELECTED && CicloListo == false){
            String[] opciones = new String[2];
            opciones[0] = "Continuar";
            opciones[1] = "Cancelar";
            //Pregunto si desea confirmar que el ciclo esta listo
            int eleccion = JOptionPane.showOptionDialog(null, "Al marcar como LISTO ya no podra hacer cambios al Ciclo:\n - Ya no podra agregar o eliminar Grados y Cursos.\n - Ya no podra realizar Asignaciones de Cursos a Catedráticos.\n\nDesea continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION){
                String marcarListo = "UPDATE CicloEscolar SET cicloescolar.Listo = 1 WHERE cicloescolar.Id ="+ID.get(posicion)+";";
                try {
                    base.prepareStatement("START TRANSACTION").executeQuery();
                    base.prepareStatement(marcarListo).executeUpdate();
                    CicloListo = true;
                    agregar_curso.setEnabled(false);
                    eliminar_curso.setEnabled(false);
                    agregar_grado.setEnabled(false);
                    eliminar_grado.setEnabled(false);
                    asignaciones.setEnabled(false);
                    guardar_cambios.setEnabled(false);
                    importar_datos.setEnabled(false);
                    ciclo_listo.setEnabled(false);
                    Tx_Nombre_curso.setEnabled(false);
                    Tx_Nombre_grado.setEnabled(false);
                    Tx_seccion.setEnabled(false);
                    ciclo_listo.setSelected(true);
                    base.prepareStatement("COMMIT");
                } catch (SQLException ex) {
                    try {
                        base.prepareStatement("ROLLBACK").executeQuery();
                    } catch (SQLException ex1) {
                        Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_ciclo_listoItemStateChanged

    private void ciclo_cerradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciclo_cerradoItemStateChanged
       if(cicloCambiado && evt.getStateChange() == ItemEvent.SELECTED && CicloCerrado == false){
            String[] opciones = new String[2];
            opciones[0] = "Continuar";
            opciones[1] = "Cancelar";
            
            //Pregunto si desea copiar los cursos y grados de un ciclo anterior
            int eleccion = JOptionPane.showOptionDialog(null, "Al marcar como CERRADO ya no podra hacer cambios a Ciclo:\n - Ya no podra editar Notas de los Estudiantes.\n - Ya no podra realizar cambios a los Grados.\n\nDesea continuar?", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION){
                String Cerrarciclo = "UPDATE CicloEscolar SET cicloescolar.Cerrado = 1 WHERE cicloescolar.Id ="+ID.get(posicion)+";";
                try {
                    base.prepareStatement("START TRANSACTION").executeQuery();
                    base.prepareStatement(Cerrarciclo).executeUpdate();
                    CicloCerrado = true;
                    agregar_curso.setEnabled(false);
                    eliminar_curso.setEnabled(false);
                    agregar_grado.setEnabled(false);
                    eliminar_grado.setEnabled(false);
                    asignaciones.setEnabled(false);
                    guardar_cambios.setEnabled(false);
                    importar_datos.setEnabled(false);
                    ciclo_listo.setEnabled(false);
                    Tx_Nombre_curso.setEnabled(false);
                    Tx_Nombre_grado.setEnabled(false);
                    Tx_seccion.setEnabled(false);
                    ciclo_cerrado.setSelected(true);
                    ciclo_cerrado.setEnabled(false);
                    base.prepareStatement("COMMIT").executeQuery();
                } catch (SQLException ex) {
                    try {
                        base.prepareStatement("ROLLBACK").executeQuery();
                    } catch (SQLException ex1) {
                        Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_ciclo_cerradoItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(cursos_agregados.size() > 0 || grados_agregados.size() > 0 || id_cursos_borrados.size() > 0 || nombre_grados_borrados.size() > 0){
            String[] opciones = new String[2];
            opciones[0] = "SI";
            opciones[1] = "NO";
            //Pregunto si desea guardar los cambios hechos
            int eleccion = JOptionPane.showOptionDialog(null, "Desea guardar los cambios realizados", "Cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if(eleccion == JOptionPane.YES_OPTION) {
                Guardar_cambios_grados();
                Guardar_cambios_cursos();
                limpiar_listas();
                Datos_Ciclo();                
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void CursosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CursosKeyPressed
        int codigoTecla = (int)evt.getKeyChar();
        if (codigoTecla==8 || codigoTecla==127) {   // Son las teclas de Retroceso y Suprimir, respectivamente
            int indexCurso = Cursos.getSelectedRow();
            if (indexCurso != -1)
                eliminar_curso_seleccionado(indexCurso);
        }
    }//GEN-LAST:event_CursosKeyPressed

    private void GradosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GradosKeyPressed
        int codigoTecla = (int)evt.getKeyChar();
        if (codigoTecla==8 || codigoTecla==127) {   // Son las teclas de Retroceso y Suprimir, respectivamente
            int indexGrado = Grados.getSelectedRow();
            if (indexGrado != -1)
                eliminar_grado_seleccionado(indexGrado);
        }
    }//GEN-LAST:event_GradosKeyPressed

    private void CursosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CursosMousePressed
        pos_cursos = Cursos.getSelectedRow();
        eliminar_curso.setEnabled(!CicloListo);   // Se puede eliminar Cursos siempre que el Ciclo aún no esté Listo
    }//GEN-LAST:event_CursosMousePressed

    private void GradosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GradosMousePressed
        try {
            pos_grados = Grados.getSelectedRow();
            String aux  = Grados.getValueAt(pos_grados, 1) +" "+Grados.getValueAt(pos_grados, 2);
            if(Nombre_grado.contains(aux)){
                Tabla_cursos_asignados(Id_grado.get(Nombre_grado.indexOf(aux)));
            }
            eliminar_grado.setEnabled(!CicloListo);   // Se pueden eliminar Grados siempre que el Ciclo aún no esté Listo
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GradosMousePressed

    private void jScrollPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane4MouseClicked
        
    }//GEN-LAST:event_jScrollPane4MouseClicked

    private void jScrollPane4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4MouseExited

    private void eliminar_grado_seleccionado(int indexGrado) {
        String Grado = Grados.getValueAt(indexGrado, 1).toString();
        String seccion = Grados.getValueAt(indexGrado, 2).toString();
        if(Nombre_grado.contains(Grado+" "+seccion)){
            Id_grados_borrados.add(Id_grado.get(Nombre_grado.indexOf(Grado+" "+seccion)));
            nombre_grados_borrados.add(Grado+" "+seccion);
        }else{
            int aux = nombre_grados_agregados.indexOf(Grado+" "+seccion);
            nombre_grados_agregados.remove(aux);
            grados_agregados.remove(aux);
            seccion_agregados.remove(aux);
        }
        // Eliminación del registro en la tabla donde se muestra
        ((DefaultTableModel)Grados.getModel()).removeRow(indexGrado);
        pos_grados = -1;
        eliminar_grado.setEnabled(false);
         // Actualización del No. relacionado a cada curso que queda
        int cantidad = Grados.getRowCount();
        for(int fil=indexGrado; fil<cantidad; fil++)
            Grados.setValueAt(""+Integer.toString(fil+1), fil, 0);
    }
    
    private void eliminar_curso_seleccionado(int indexCurso) {
        String curso = Cursos.getValueAt(indexCurso, 1).toString();
        if(Nombre_curso.contains(curso)){
            id_cursos_borrados.add(Id_curso.get(Nombre_curso.indexOf(curso)));
            nombre_cursos_borrados.add(curso);
        }
        else
            cursos_agregados.remove(curso);
        // Eliminación del registro en la tabla donde se muestra
        ((DefaultTableModel)Cursos.getModel()).removeRow(indexCurso);
        pos_cursos = -1;
        eliminar_curso.setEnabled(false);
        // Actualización del No. relacionado a cada curso que queda
        int cantidad = Cursos.getRowCount();
        for(int fil=indexCurso; fil<cantidad; fil++)
            
            Cursos.setValueAt(""+Integer.toString(fil+1), fil, 0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ciclo_Escolar dialog = new Ciclo_Escolar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
     * Funcion que sirve para cargar la información de los ciclos escolares existentes
     * @throws SQLException 
     */
    public void Cargar_Datos() throws SQLException{
        ciclo.removeAllItems();
        boolean encontrado = false;
        ID = new ArrayList<String>();
        String instrucccion = "SELECT anio,Id FROM CicloEscolar ORDER BY anio";
        base.createStatement().executeUpdate("START TRANSACTION");
        ResultSet consulta = base.createStatement().executeQuery(instrucccion);
        while(consulta.next()){
            String nuevo = consulta.getString(1);
            ID.add(consulta.getString(2));
            if(nuevo.equals(año)) ciclo.setSelectedItem(año);
            ciclo.addItem(nuevo);
        }
        base.createStatement().executeUpdate("COMMIT");
    }
    
    /**
     * Función que llena la tabla de grados con la información existente en la base
     * @param consulta resultados de la consulta hecha a la base
     * @throws SQLException 
     */
    public void Tabla_Grados(ResultSet consulta) throws SQLException{
        No_editable tabla = new No_editable();
        int cont = 1;
        tabla.addColumn("No");
        tabla.addColumn("Nombre");
        tabla.addColumn("Sección");
        String[] fila = new String[3];
        while(consulta.next()){
            fila[0] = Integer.toString(cont);
            fila[1] = consulta.getString(1);
            fila[2] = consulta.getString(2);
            tabla.addRow(fila);
            Id_grado.add(consulta.getString(3));
            Nombre_grado.add(fila[1]+" "+fila[2]);
            cont++;
        }
        Grados.setModel(tabla);
    }
    
    /**
     * Función que llena la tabla de cursos con la información existente en la base
     * @param consulta resultados de la consulta hecha a la base
     * @throws SQLException 
     */
    public void Tabla_cursos(ResultSet consulta) throws SQLException{
        No_editable tabla = new No_editable();
        String[] fila = new String[2];
        int cont = 1;
        tabla.addColumn("No");
        tabla.addColumn("Nombre");
        while (consulta.next()){
            fila[0] = Integer.toString(cont);
            fila[1] = consulta.getString(1);
            Nombre_curso.add(fila[1]);
            Id_curso.add(consulta.getString(2));
            tabla.addRow(fila);
            cont++;
        }
       Cursos.setModel(tabla);
    }
    
    /**
     * Función que muestra los cursos asignados a un grado
     * @param Id Id del grado que se desea mostrar
     * @throws SQLException 
     */
    public void Tabla_cursos_asignados(String Id) throws SQLException{
        ResultSet consulta_Curso_asignado = base.createStatement().executeQuery("SELECT curso.Nombre, catedratico.Nombres,catedratico.Apellidos FROM asignacioncat INNER JOIN curso ON asignacioncat.Curso_Id = curso.Id INNER JOIN cicloescolar ON asignacioncat.CicloEscolar_Id = cicloescolar.Id INNER JOIN catedratico ON asignacioncat.Catedratico_Id = catedratico.Id WHERE asignacioncat.CicloEscolar_Id = "+ID.get(posicion)+" AND asignacioncat.Grado_Id = "+Id+";");
        No_editable tabla = new No_editable();
        tabla.addColumn("Curso");
        tabla.addColumn("Catedratico Asignado");
        //Se muestra los cursos encontrados
        while (consulta_Curso_asignado.next()){
            String[] fila = new String[2];
            fila[0] = consulta_Curso_asignado.getString(1);
            fila[1] = consulta_Curso_asignado.getString(2) +" "+consulta_Curso_asignado.getString(3);
            tabla.addRow(fila);
        }   
       Cursos_asignados.setModel(tabla);
    }
    
    /**
     * Función que realiza todos los cambios (agregar o eliminar) de los grados del ciclo, 
     * en la base de datos.
     */
    public void Guardar_cambios_grados(){
        int tamaño_grados = grados_agregados.size();                
        //Se crea la relacion de los nuevos grados
        for (int i = 0; i < tamaño_grados; i++) {
            String Nombre = grados_agregados.get(i);
            String Seccion = seccion_agregados.get(i);
           try {
               // confirmar si ya existe un grado con ese nombre
               base.createStatement().executeQuery("START TRANSACTION");
               ResultSet consulta_1 = base.createStatement().executeQuery("SELECT* FROM grado WHERE grado.Nombre = '"+Nombre+"' AND grado.Seccion = '"+Seccion+"';");
               //Si ya existe solo se crea una relacion del grado con el ciclo
               if(consulta_1.next()){
                   String instruccion_asignacion = "INSERT INTO asignacioncat(asignacioncat.CicloEscolar_Id,asignacioncat.Grado_Id) VALUES ("+ID.get(posicion)+","+consulta_1.getString(1)+");";
                   base.prepareStatement(instruccion_asignacion).executeUpdate();

               }   
               //Si no existe se crea el registro en grado y luego la relacion del grado con el ciclo
               else{
                   //Se crea el grado y obtengo el Id
                   String instruccion_grado = "INSERT INTO grado(Nombre,Seccion) VALUES('"+Nombre+"','"+Seccion+"');";
                   base.prepareStatement(instruccion_grado).executeUpdate();
                   ResultSet Id = base.createStatement().executeQuery("SELECT Id FROM grado WHERE grado.Nombre = '"+Nombre+"' AND grado.Seccion = '"+Seccion+"';");
                   Id.next();
                   //Creo la relacion del grado con ciclo
                   String instruccion_asignacion = "INSERT INTO asignacioncat(asignacioncat.CicloEscolar_Id,asignacioncat.Grado_Id) VALUES ("+ID.get(posicion)+","+Id.getString(1)+");";
                   base.prepareStatement(instruccion_asignacion).executeUpdate();
               }
               base.createStatement().executeQuery("COMMIT");
               } catch (SQLException ex) {
               Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        int tamaño_grados_borrados = nombre_grados_borrados.size();
        for (int i = 0; i < tamaño_grados_borrados; i++) {
            String id = Id_grados_borrados.get(i);
           try {
                   base.createStatement().executeQuery("START TRANSACTION");
                   //borro la relacion que tiene el grado con el ciclo
                   String instruccion_grado = "DELETE FROM asignacioncat WHERE asignacioncat.CicloEscolar_Id = "+ID.get(posicion) +" AND asignacioncat.Grado_Id = "+id+";";
                   base.prepareStatement(instruccion_grado).executeUpdate();
                   base.createStatement().executeQuery("COMMIT");
               } catch (SQLException ex) {
               Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
           }
        }                
    }
    
    /**
     * Función que realiza todos los cambios (agregar o eliminar) de los cursos del ciclo, 
     * en la base de datos. 
     */
    public void Guardar_cambios_cursos(){
       int tamaño_cursos = cursos_agregados.size();
       int tamaño_cursos_borrados = id_cursos_borrados.size();
        for (int i = 0; i < tamaño_cursos; i++) {
            String Nombre = cursos_agregados.get(i);
                try {
                    // confirmar si ya existe un curso con ese nombre
                    base.createStatement().executeLargeUpdate("START TRANSACTION");
                    ResultSet consulta_1 = base.createStatement().executeQuery("SELECT* FROM curso WHERE curso.Nombre = '"+Nombre+"';");
                    //Si ya existe solo se crea una relacion del curso con el ciclo
                    if(consulta_1.next()){
                        String instruccion_asignacion = "INSERT INTO asignacioncat(asignacioncat.CicloEscolar_Id,asignacioncat.Curso_Id) VALUES ("+ID.get(posicion)+","+consulta_1.getString(1)+");";
                        base.prepareStatement(instruccion_asignacion).executeUpdate();
                    }   
                    //Si no existe se crea el registro en curso y luego la relacion del curso con el ciclo
                    else{
                        //Se crea el curso y obtengo el Id
                        String instruccion_curso = "INSERT INTO curso(Nombre) VALUES('"+Nombre+"');";
                        base.prepareStatement(instruccion_curso).executeUpdate();
                        ResultSet Id = base.createStatement().executeQuery("SELECT Id FROM curso WHERE curso.Nombre = '"+Nombre+"';");
                        Id.next();

                        //Creo la relacion del curso con ciclo
                        String instruccion_asignacion = "INSERT INTO asignacioncat(asignacioncat.CicloEscolar_Id,asignacioncat.Curso_Id) VALUES ("+ID.get(posicion)+","+Id.getString(1)+");";
                        base.prepareStatement(instruccion_asignacion).executeUpdate();
                    }
                    base.createStatement().executeLargeUpdate("COMMIT");
                    } catch (SQLException ex) {
                    Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
                }
           
        }
        
        for (int i = 0; i < tamaño_cursos_borrados; i++) {
            try {
                    String Id = id_cursos_borrados.get(i);
                    //Se crea el curso y obtengo el Id
                    base.createStatement().executeLargeUpdate("START TRANSACTION");
                        String instruccion_curso = "DELETE FROM asignacioncat WHERE asignacioncat.CicloEscolar_Id = "+ID.get(posicion)+" AND asignacioncat.Curso_Id = "+Id+";";
                        base.prepareStatement(instruccion_curso).executeUpdate();
                        base.createStatement().executeLargeUpdate("COMMIT");
                    } catch (SQLException ex) {
                    Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        
    }
    
    /**
     * Procedimiento utilizado para cargar los datos de un ciclo
     */
    public void Datos_Ciclo(){
        cicloCambiado = false;
        Id_curso = new ArrayList<>();
        Nombre_curso = new ArrayList<>();
        Id_grado = new ArrayList<>();
        Nombre_grado = new ArrayList<>();
        eliminar_curso.setEnabled(false);
        eliminar_grado.setEnabled(false);
        if(posicion != -1){
            String Id = ID.get(posicion);
            try {
                ResultSet consultab = base.createStatement().executeQuery("SELECT Listo, Cerrado FROM cicloescolar WHERE cicloescolar.Id = '"+Id+"';");
                if(consultab.next()){
                    if(consultab.getString(1).equals("1")){
                        CicloListo = true;
                        agregar_curso.setEnabled(false);
                        agregar_grado.setEnabled(false);
                        asignaciones.setEnabled(false);
                        guardar_cambios.setEnabled(false);
                        importar_datos.setEnabled(false);
                        ciclo_listo.setEnabled(false);
                        Tx_Nombre_curso.setEnabled(false);
                        Tx_Nombre_grado.setEnabled(false);
                        Tx_seccion.setEnabled(false);
                        ciclo_listo.setSelected(true);
                        if(consultab.getString(2).equals("1")){
                            this.ciclo_cerrado.setEnabled(false);
                            ciclo_cerrado.setSelected(true);
                            CicloCerrado = true;
                        }else{
                            this.ciclo_cerrado.setEnabled(true);
                            ciclo_cerrado.setSelected(false);
                            CicloCerrado = false;
                        }
                        this.ciclo_cerrado.setVisible(true);
                    }
                    else{
                        CicloListo = false;
                        agregar_curso.setEnabled(true);
                        agregar_grado.setEnabled(true);
                        asignaciones.setEnabled(true);
                        guardar_cambios.setEnabled(true);
                        importar_datos.setEnabled(true);
                        ciclo_listo.setEnabled(true);
                        Tx_Nombre_curso.setEnabled(true);
                        Tx_Nombre_grado.setEnabled(true);
                        Tx_seccion.setEnabled(true);
                        ciclo_listo.setSelected(false);
                        this.ciclo_cerrado.setVisible(false);
                    }

                }
                ResultSet consulta_Grados = base.createStatement().executeQuery("SELECT grado.Nombre,grado.Seccion, grado.Id FROM AsignacionCAT INNER JOIN grado ON AsignacionCAT.Grado_Id = grado.Id WHERE AsignacionCAT.CicloEscolar_Id="+Id+" AND AsignacionCAT.Curso_Id is null ANd AsignacionCAT.Catedratico_Id is null;");
                ResultSet consulta_Curso = base.createStatement().executeQuery("SELECT curso.Nombre, curso.Id FROM asignacioncat INNER JOIN curso ON asignacioncat.Curso_Id = curso.Id INNER JOIN cicloescolar ON asignacioncat.CicloEscolar_Id = cicloescolar.Id WHERE asignacioncat.CicloEscolar_Id = "+Id+" AND asignacioncat.Grado_Id is null AND asignacioncat.Catedratico_Id is null;");
                Tabla_Grados(consulta_Grados);
                Tabla_cursos(consulta_Curso);
                ((DefaultTableModel)Cursos_asignados.getModel()).setRowCount(0);
            } catch (SQLException ex) {
                Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        cicloCambiado = true;
    }
    
    private void limpiar_listas(){
        cursos_agregados = new ArrayList<>();
        id_cursos_borrados = new ArrayList<>();
        nombre_cursos_borrados = new ArrayList<>();
        Id_grados_borrados = new ArrayList<>();
        nombre_grados_borrados = new ArrayList<>();
        grados_agregados = new ArrayList<>();
        seccion_agregados = new ArrayList<>();
        nombre_grados_agregados = new ArrayList<>();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Cursos;
    private javax.swing.JTable Cursos_asignados;
    private javax.swing.JTable Grados;
    private javax.swing.JMenu Menu_crear;
    private javax.swing.JTextField Tx_Nombre_curso;
    private javax.swing.JTextField Tx_Nombre_grado;
    private javax.swing.JTextField Tx_seccion;
    private javax.swing.JButton agregar_curso;
    private javax.swing.JButton agregar_grado;
    private javax.swing.JButton asignaciones;
    private javax.swing.JComboBox<String> ciclo;
    private javax.swing.JRadioButton ciclo_cerrado;
    private javax.swing.JRadioButton ciclo_listo;
    private javax.swing.JButton eliminar_curso;
    private javax.swing.JButton eliminar_grado;
    private javax.swing.JButton guardar_cambios;
    private javax.swing.JButton importar_datos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
