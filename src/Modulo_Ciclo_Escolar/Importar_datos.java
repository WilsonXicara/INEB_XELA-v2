/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Ciclo_Escolar;

import Tipos_tablas.No_editable;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wilson Xicará
 */
public class Importar_datos extends javax.swing.JDialog {
    private Connection base;
    private ArrayList<String> Id_ciclo, Id_grado, Id_curso;
    private String idCicloActual, nombreCicloActual;
    private boolean ciclosCargados;
     
    /**
     * Creates new form Crear_Ciclo_Escolar_3
     */
    public Importar_datos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    }
    public Importar_datos(java.awt.Frame parent, boolean modal,Connection base, String idCicloActual) {
        super(parent, modal);
        initComponents();
        this.base = base;
        this.idCicloActual = idCicloActual;
        ciclosCargados = false;
        
        // Obtención de datos importanes desde la Base de Datos
        try {
            Statement sentencia = base.createStatement();
            // Obtención de todos los Ciclos Escolares de los cuales se puede copiar los datos
            ResultSet cConsulta = sentencia.executeQuery("SELECT Id, Anio FROM CicloEscolar WHERE Id != "+idCicloActual);
            Id_ciclo = new ArrayList<>();
            Id_grado = new ArrayList<>();
            Id_curso = new ArrayList<>();
            while(cConsulta.next()){
                Id_ciclo.add(cConsulta.getString(1));
                ciclo.addItem(cConsulta.getString(2));
            } ciclosCargados = true;
            ciclo.setSelectedIndex(-1);
            ciclo.setSelectedIndex(ciclo.getItemCount()==0 ? -1 : ciclo.getItemCount()-1);
            // Obtención del nombre del Ciclo Actual (el que copiará los datos)
            cConsulta = sentencia.executeQuery("SELECT Anio FROM CicloEscolar WHERE Id = "+idCicloActual);
            cConsulta.next();
            nombreCicloActual = cConsulta.getString(1);
            // Obtención de las Asignaciones que tiene el Ciclo Escolar Actual
            mostrar_asignaciones_actuales();
            // Otras configuraciones importantes
            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Asignación de Grados al Ciclo Escolar "+nombreCicloActual, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
            jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Asignación de Cursos al Ciclo Escolar "+nombreCicloActual, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
            this.setTitle("Importar datos para el Ciclo Escolar "+nombreCicloActual);
            this.setLocationRelativeTo(null);
        } catch (SQLException ex) {
            System.out.println("Error al intentar cargar algunos datos desde la Base de Datos en Importa_datos.java");
            Logger.getLogger(Importar_datos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        etiqueta_grados_asignados = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Grados_actuales = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grados_copiables = new javax.swing.JTable();
        etiqueta_grados_copiados = new javax.swing.JLabel();
        copiar_todos_los_grados = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        etiqueta_cursos_copiados = new javax.swing.JLabel();
        etiqueta_cursos_asignados = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Cursos_actuales = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Cursos_copiables = new javax.swing.JTable();
        copiar_todos_los_cursos = new javax.swing.JCheckBox();
        guardar = new javax.swing.JButton();
        ciclo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();
        copiar_todo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "No hay Grados Asignados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        etiqueta_grados_asignados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        etiqueta_grados_asignados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta_grados_asignados.setText("Grados copiados");

        Grados_actuales.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Grados_actuales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Grado", "Seccion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grados_actuales.setRowHeight(20);
        Grados_actuales.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Grados_actuales);
        if (Grados_actuales.getColumnModel().getColumnCount() > 0) {
            Grados_actuales.getColumnModel().getColumn(0).setResizable(false);
            Grados_actuales.getColumnModel().getColumn(1).setResizable(false);
        }

        Grados_copiables.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Grados_copiables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Copiar", "Grado", "Seccion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grados_copiables.setRowHeight(20);
        jScrollPane1.setViewportView(Grados_copiables);

        etiqueta_grados_copiados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        etiqueta_grados_copiados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta_grados_copiados.setText("Grados copiables");

        copiar_todos_los_grados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        copiar_todos_los_grados.setText("Copiar todos los Grados");
        copiar_todos_los_grados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                copiar_todos_los_gradosItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiqueta_grados_asignados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiqueta_grados_copiados, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(copiar_todos_los_grados))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(copiar_todos_los_grados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiqueta_grados_asignados)
                    .addComponent(etiqueta_grados_copiados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "No hay Cursos Asignados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        etiqueta_cursos_copiados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        etiqueta_cursos_copiados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta_cursos_copiados.setText("Cursos copiables");

        etiqueta_cursos_asignados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        etiqueta_cursos_asignados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta_cursos_asignados.setText("Cursos copiados");

        Cursos_actuales.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Cursos_actuales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Curso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Cursos_actuales.setRowHeight(20);
        Cursos_actuales.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(Cursos_actuales);
        if (Cursos_actuales.getColumnModel().getColumnCount() > 0) {
            Cursos_actuales.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane2.setEnabled(false);

        Cursos_copiables.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Cursos_copiables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Copiar", "Curso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Cursos_copiables.setRowHeight(20);
        Cursos_copiables.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Cursos_copiables);

        copiar_todos_los_cursos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        copiar_todos_los_cursos.setText("Copiar todos los Cursos");
        copiar_todos_los_cursos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                copiar_todos_los_cursosItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(copiar_todos_los_cursos)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(etiqueta_cursos_asignados, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(etiqueta_cursos_copiados, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(copiar_todos_los_cursos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiqueta_cursos_asignados)
                    .addComponent(etiqueta_cursos_copiados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        guardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar(36x36).png"))); // NOI18N
        guardar.setText("Guardar cambios");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        ciclo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ciclo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cicloItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Ciclo Escolar del que se copiarán datos:");

        regresar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/atras(25x26).PNG"))); // NOI18N
        regresar.setText("Regresar");
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });

        copiar_todo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        copiar_todo.setText("Copiar todos los Grados y Cursos");
        copiar_todo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                copiar_todoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(copiar_todo)
                        .addGap(18, 18, 18)
                        .addComponent(guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(guardar)
                            .addComponent(copiar_todo)))
                    .addComponent(regresar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // Creación de la relación de los Grados con el Ciclo nuevo
        int cantidad = Id_grado.size();
        for(int cont=0; cont<cantidad; cont++) {
            try {
                if((boolean)Grados_copiables.getValueAt(cont, 0))
                    base.prepareStatement("INSERT INTO AsignacionCAT(CicloEscolar_Id, Grado_Id) VALUES("+idCicloActual+", "+Id_grado.get(cont)+")").executeUpdate();
            } catch (SQLException ex) {
                System.out.println("Error al intentar crear la AsignacionCAT con CicloEscolar_Id = "+idCicloActual+", Grado_Id = "+Id_grado.get(cont));
//                Logger.getLogger(Importar_datos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // Creación de la relación de los Cursos con el Ciclo nuevo
        cantidad = Id_curso.size();
        for(int cont=0; cont<cantidad; cont++) {
            try {
                if((boolean)Cursos_copiables.getValueAt(cont, 0))
                    base.prepareStatement("INSERT INTO AsignacionCAT(CicloEscolar_Id, Curso_Id) VALUES("+idCicloActual+", "+Id_curso.get(cont)+")").executeUpdate();
            } catch (SQLException ex) {
                System.out.println("Error al intentar crear la AsignacionCAT con CicloEscolar_Id = "+idCicloActual+", Curso_Id = "+Id_curso.get(cont));
//                Logger.getLogger(Importar_datos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // Hasta aquí se garantiza la copia de la Asignación de un Ciclo diferente al que se está configurando
        guardar.setEnabled(false);  // Inhabilito el botón para evitar que se duplique el copiado
        mostrar_asignaciones_actuales();
    }//GEN-LAST:event_guardarActionPerformed

    private void cicloItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cicloItemStateChanged
        int posicion = ciclo.getSelectedIndex();
        if (ciclosCargados && evt.getStateChange()==ItemEvent.SELECTED && posicion!=-1){
            try {
                Id_curso.clear();
                Id_grado.clear();
                Statement sentencia = base.createStatement();
                ResultSet cConsulta;
                // Obtención de los Grados
                cConsulta = sentencia.executeQuery("SELECT Grado.Id, Grado.Nombre, Grado.Seccion FROM AsignacionCAT "
                        + "INNER JOIN Grado ON AsignacionCAT.Grado_Id = Grado.Id "
                        + "INNER JOIN CicloEscolar ON AsignacionCAT.CicloEscolar_Id = CicloEscolar.Id "
                        + "WHERE AsignacionCAT.CicloEscolar_Id = "+Id_ciclo.get(posicion)+" AND AsignacionCAT.Curso_Id IS NULL AND AsignacionCAT.Catedratico_Id IS NULL");
                DefaultTableModel modelGrados = (DefaultTableModel)Grados_copiables.getModel();
                modelGrados.setRowCount(0);
                while (cConsulta.next()) {
                    Id_grado.add(cConsulta.getString(1));
                    modelGrados.addRow(new Object[]{
                        false,
                        cConsulta.getString(2),
                        cConsulta.getString(3)
                    });
                }
                // Obtención de los Cursos
                cConsulta = sentencia.executeQuery("SELECT Curso.Id, Curso.Nombre FROM AsignacionCAT "
                        + "INNER JOIN Curso ON AsignacionCAT.Curso_Id = Curso.Id "
                        + "INNER JOIN CicloEscolar ON AsignacionCAT.CicloEscolar_Id = CicloEscolar.Id "
                        + "WHERE AsignacionCAT.CicloEscolar_Id = "+Id_ciclo.get(posicion)+" AND AsignacionCAT.Grado_Id IS NULL AND AsignacionCAT.Catedratico_Id IS NULL");
                DefaultTableModel modelCursos = (DefaultTableModel)Cursos_copiables.getModel();
                modelCursos.setRowCount(0);
                while (cConsulta.next()) {
                    Id_curso.add(cConsulta.getString(1));
                    modelCursos.addRow(new Object[]{
                        false,
                        cConsulta.getString(2)
                    });
                }
            } catch (SQLException ex) {
                System.out.println("Error al obtener los Grados y Cursos del Ciclo Seleccionado");
                Logger.getLogger(Importar_datos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cicloItemStateChanged

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_regresarActionPerformed

    private void copiar_todoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_copiar_todoItemStateChanged
        // Cuando el check es seleccionado, se seleccionan e inhabilitan los check de Copiar Grados y Cursos por separado
        boolean marcado = (evt.getStateChange() == ItemEvent.SELECTED);
        copiar_todos_los_grados.setSelected(marcado);
        copiar_todos_los_grados.setEnabled(!marcado);
        copiar_todos_los_cursos.setSelected(marcado);
        copiar_todos_los_cursos.setEnabled(!marcado);
    }//GEN-LAST:event_copiar_todoItemStateChanged

    private void copiar_todos_los_gradosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_copiar_todos_los_gradosItemStateChanged
        // Si el check es seleccionado, marco como seleccionado todos los check de grados y deshabilito la tabla
        boolean marcado = (evt.getStateChange() == ItemEvent.SELECTED);
        Grados_copiables.setEnabled(!marcado);
        if (marcado) {
            int cantidad = Grados_copiables.getRowCount();
            for(int i=0; i<cantidad; i++)
                Grados_copiables.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_copiar_todos_los_gradosItemStateChanged

    private void copiar_todos_los_cursosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_copiar_todos_los_cursosItemStateChanged
        // Si el check es seleccionado, marco como seleccionado todos los check de cursos y deshabilito la tabla
        boolean marcado = (evt.getStateChange() == ItemEvent.SELECTED);
        Cursos_copiables.setEnabled(!marcado);
        if (marcado) {
            int cantidad = Cursos_copiables.getRowCount();
            for(int i=0; i<cantidad; i++)
                Cursos_copiables.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_copiar_todos_los_cursosItemStateChanged

    public void mostrar_asignaciones_actuales() {
        // Obtención de los Grados y Cursos asignados del Ciclo Escolar al que se le agregarán más asignaciones
        try {
            Statement sentencia = base.createStatement();
            ResultSet cConsulta;
            int contador;
            // Obtención de los Grados
            cConsulta = sentencia.executeQuery("SELECT Grado.Id, Grado.Nombre, Grado.Seccion FROM AsignacionCAT "
                    + "INNER JOIN Grado ON AsignacionCAT.Grado_Id = Grado.Id "
                    + "WHERE AsignacionCAT.CicloEscolar_Id = "+idCicloActual+" AND AsignacionCAT.Curso_Id IS NULL AND AsignacionCAT.Catedratico_Id IS NULL");
            DefaultTableModel modelGrados = (DefaultTableModel)Grados_actuales.getModel();
            modelGrados.setRowCount((contador = 0));
            while (cConsulta.next()) {
                modelGrados.addRow(new String[]{
                    ""+(++contador),
                    cConsulta.getString(2),
                    cConsulta.getString(3)
                });
            }
            // Obtención de los Cursos
            cConsulta = sentencia.executeQuery("SELECT Curso.Id, Curso.Nombre FROM AsignacionCAT "
                    + "INNER JOIN Curso ON AsignacionCAT.Curso_Id = Curso.Id "
                    + "INNER JOIN CicloEscolar ON AsignacionCAT.CicloEscolar_Id = CicloEscolar.Id "
                    + "WHERE AsignacionCAT.CicloEscolar_Id = "+idCicloActual+" AND AsignacionCAT.Grado_Id IS NULL AND AsignacionCAT.Catedratico_Id IS NULL");
            DefaultTableModel modelCursos = (DefaultTableModel)Cursos_actuales.getModel();
            modelCursos.setRowCount((contador = 0));
            while (cConsulta.next()) {
                modelCursos.addRow(new String[]{
                    ""+(++contador),
                    cConsulta.getString(2)
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Importar_datos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Importar_datos dialog = new Importar_datos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Cursos_actuales;
    private javax.swing.JTable Cursos_copiables;
    private javax.swing.JTable Grados_actuales;
    private javax.swing.JTable Grados_copiables;
    private javax.swing.JComboBox<String> ciclo;
    private javax.swing.JCheckBox copiar_todo;
    private javax.swing.JCheckBox copiar_todos_los_cursos;
    private javax.swing.JCheckBox copiar_todos_los_grados;
    private javax.swing.JLabel etiqueta_cursos_asignados;
    private javax.swing.JLabel etiqueta_cursos_copiados;
    private javax.swing.JLabel etiqueta_grados_asignados;
    private javax.swing.JLabel etiqueta_grados_copiados;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton regresar;
    // End of variables declaration//GEN-END:variables
}
